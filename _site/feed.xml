<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-06-23T08:02:17+03:00</updated><id>/feed.xml</id><title type="html">Random Thoughts</title><subtitle>A home for meshack's random thoughts. License: WTFPL – Do What the Fuck You Want to Public License</subtitle><entry><title type="html">Whatsapp Chatbot in Flask &amp;amp; Twillio</title><link href="/jekyll/update/2021/06/23/whatsapp-chatbot.html" rel="alternate" type="text/html" title="Whatsapp Chatbot in Flask &amp;amp; Twillio" /><published>2021-06-23T07:30:20+03:00</published><updated>2021-06-23T07:30:20+03:00</updated><id>/jekyll/update/2021/06/23/whatsapp-chatbot</id><content type="html" xml:base="/jekyll/update/2021/06/23/whatsapp-chatbot.html">&lt;p&gt;A &lt;a href=&quot;&amp;quot;https://en.wikipedia.org/wiki/Chatbot&amp;quot;&quot;&gt;chatbot&lt;/a&gt; is a software application that is used to conduct an on-line conversation with a human user through written or text-to-speech, in lieu of providing direct contact with a live &lt;strong&gt;human agent&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s explore how we can build a chatbot for WhatsApp using the &lt;a href=&quot;&amp;quot;https://www.twilio.com/whatsapp&amp;quot;&quot;&gt;Twilio API for WhatsApp&lt;/a&gt; and the &lt;a href=&quot;&amp;quot;https://www.palletsprojects.com/p/flask/&amp;quot;&quot;&gt;Flask framework for Python&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;requirements&quot;&gt;Requirements..?&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Python 3.6 or newer. For Linux users, python is installed by default. Otherwise you can download it from &lt;a href=&quot;&amp;quot;http://python.org&amp;quot;&quot;&gt;python&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ngrok. This helps you connect the flask application running in your machine to a public URL that twilio can connect to. You can get it at &lt;a href=&quot;&amp;quot;https://ngrok.com/download&amp;quot;&quot;&gt;ngrok&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flask. This is a micro-framework for python. It will help us create a web app that responds to incoming WhatsApp messages. &lt;a href=&quot;&amp;quot;https://flask.palletsprojects.com/en/1.1.x/installation/#install-flask&amp;quot;&quot;&gt;Flask&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a Twilio account.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A WhatsApp enabled smartphone.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;setting-up-your-testing-sandbox&quot;&gt;Setting up your Testing Sandbox&lt;/h4&gt;

&lt;p&gt;Twilio provides a &lt;a href=&quot;&amp;quot;https://www.twilio.com/login?g=%2Fconsole%2Fsms%2Fwhatsapp%2Flearn%3F&amp;amp;t=f8ac1360bcde721e2e5d56ee98dc6b802a45b3aaa9b8b32b418cb431010b9d60&amp;quot;&quot;&gt;WhatsApp Sandbox&lt;/a&gt; where you can easily develop and test your web app.&lt;/p&gt;

&lt;p&gt;To connect your smartphone to the sandbox, from your Twilio console, select Programmable sms and then click WhatsApp. The WhatsApp sandbox page displays the sandbox number assigned to your account and a join code.&lt;/p&gt;

&lt;p&gt;To enable the WhatsApp sandbox for your smartphone, send a WhatsApp text with the given code to the sandbox number assigned. You should receive a text from twilio indicating that your mobile number is connected to the sandbox and you can start sending and receiving messages. It’s that simple!&lt;/p&gt;

&lt;h4 id=&quot;lets-prepare-our-environment&quot;&gt;Let’s prepare our environment&lt;/h4&gt;

&lt;p&gt;Open your terminal, create a new directory for  your project and navigate into the directory. Create a virtual environment and activate your environment. Install Twilio and Flask and requests. pip is a python package installer&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;$ mkdir whatsapp-chatbot&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$ cd whatsapp-chatbot&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$ virtualenv&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$ source /bin/activate&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(name-of-env) $ pip install twilio flask requests&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Test whether your installations of flask is working.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from flask import Flask
app = Flask(__name__)

@app.route(&quot;/&quot;)
def hello():
return &quot;Hello World!&quot;

if __name__ == &quot;__main__&quot;:
app.run(debug=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To run&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python(v) run.py 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;lets-create-our-chatbot&quot;&gt;Let’s create our chatbot,&lt;/h4&gt;

&lt;p&gt;Let’s code a little bit!&lt;/p&gt;

&lt;p&gt;The chatbot will recognize anything that has the word “quote” and respond to it otherwise it will return an error text.&lt;/p&gt;

&lt;h4 id=&quot;create-a-webhook&quot;&gt;Create a Webhook&lt;/h4&gt;

&lt;p&gt;The Twilio API for WhatsApp uses a webhook to notify an app when there is an incoming text message. Flask makes it easy to create a webhook.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from flask import Flask
app = Flask(__name__)
@app.route(&quot;/&quot;, methods=[&quot;POST&quot;])
    def index():
    #add your webhook logic here and return a response
if __name__=='__main__':
    app.run()	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have defined a / endpoint that listens only to POST requests. This endpoint is invoked every time an incoming message from a user is received by Twilio.&lt;/p&gt;

&lt;p&gt;The logic defined in our function index() will analyze messages sent by the user and return the appropriate response, in our case, a random quote or an error text.&lt;/p&gt;

&lt;h4 id=&quot;getting-messages-and--responses&quot;&gt;Getting Messages And  Responses&lt;/h4&gt;

&lt;p&gt;We need to obtain the text send by the user.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from flask import request
new_msg = request.values.get('Body', '').lower()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Twilio expects a response in &lt;a href=&quot;&amp;quot;https://www.twilio.com/docs/glossary/what-is-twilio-markup-language-twiml&amp;quot;&quot;&gt;Twilio Markup Language&lt;/a&gt;, which is XML-based.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from twilio.twiml.messaging_response import MessagingResponse

resposnse = MessagingResponse()
msg = response.message()
msg.boby('some text')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;lets-build-our-chatbot-logic&quot;&gt;Let’s build our chatbot logic&lt;/h4&gt;

&lt;p&gt;We search the incoming text for the keyword “quote”, then return a response&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;responnded = False
if &quot;quote&quot; in new_msg:
#quote response
responded = True
else:
#add error message to be displayed
if not responded:
#a text to be returned as response
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run your chatbot&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(name-of-env) $ python app.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The service is running on your laptop. We need to expose it. To do this, we use ngrok.&lt;/p&gt;

&lt;p&gt;Open your terminal and run; Since our app is running on port 5000; Our HTTP requests will be redirected to the temporary domain created.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ngrok http 5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the Twilio console, click Programmable SMS, then WhatsApp and then the sandbox. Copy the URL from ngrok output and paste it in the sandbox.&lt;/p&gt;

&lt;p&gt;You are good to go. Send messages from your smartphone and enjoy!!&lt;/p&gt;

&lt;p&gt;You can find all the code for this article on: &lt;a href=&quot;&amp;quot;https://github.com/Kimxons/whatsapp_chatbot&amp;quot;&quot;&gt;Chatbot Tutorial code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Incase of any queries, kindly hit me up on &lt;a href=&quot;&amp;quot;twitter.com/mishaelkimxons&amp;quot;&quot;&gt;Twitter&lt;/a&gt; or &lt;a href=&quot;&amp;quot;github.com/kimxons&amp;quot;&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">A chatbot is a software application that is used to conduct an on-line conversation with a human user through written or text-to-speech, in lieu of providing direct contact with a live human agent.</summary></entry><entry><title type="html">The Linux Permissions</title><link href="/jekyll/update/2021/06/23/linux-permisions.html" rel="alternate" type="text/html" title="The Linux Permissions" /><published>2021-06-23T07:20:20+03:00</published><updated>2021-06-23T07:20:20+03:00</updated><id>/jekyll/update/2021/06/23/linux-permisions</id><content type="html" xml:base="/jekyll/update/2021/06/23/linux-permisions.html">&lt;p&gt;It is important to understand the permissions model of Linux machines. Understanding how to manage these permissions is helpful in preventing some security threats (attacks) that exploit the Linux system. Files and directories in your Linux System consist of three permissions: Read, Write, and Execute. Linux inherits the Unix model of file ownership and permissions. The permissions dictate who is allowed to do what with any given file or directory in Linux.&lt;/p&gt;

&lt;h4&gt;Linux File Permissions&lt;/h4&gt;

&lt;p&gt;Linux inherited the Unix model of file Ownership and Permissions. These Permissions specify who has access to what and what they are allowed to perform with the given file or directory.&lt;/p&gt;

&lt;p&gt;The Permissions includes: Read, Write, and Execute. A Read permissions on a file or directory enables a user to bread the contents of the given file or directory. A Write permission enables a user to modify the contents of a file or delete the file or directory. An execute permission allows a user to execute the file (run a file as an executable file).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls -l 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command (in your terminal enables a user to view the permissions of a given file or directory. The output might look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;drwxr-xr-x 
-rw-rw-r--
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should note that the first character indicates whether the item in question is a directory or a file. The “d” in our first oupt indicates that the item is a directory whereas the dash implies that the item is a file. The next three characters that follow shows the permissions of the owner of the given file, with R representing Read, W for Write and X for eXecute. Notably, a dash indicates the lack of a permission.&lt;/p&gt;

&lt;p&gt;The ‘chmod’ command allows a user to change the permissions of a file. The ownership flags u, g, and o for User, owner Group, and Others respectively. The general look of the chmod command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod (ownership flag+permission flag) filepath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example: To add execution permissions for a user.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod u+x filepath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To add execute commands for everyone:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod +x filepath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also revoke permissions from a file using the chmod command.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod -x filepath

asdfgh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The ‘chown’ command can change the ownership of a file or a directory.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chown user filepath or chown user:group filepath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The ‘chgrp’ command can change the group ownership&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chrgrp group filename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To change group-owner only, use this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chgrp group_name filepath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">It is important to understand the permissions model of Linux machines. Understanding how to manage these permissions is helpful in preventing some security threats (attacks) that exploit the Linux system. Files and directories in your Linux System consist of three permissions: Read, Write, and Execute. Linux inherits the Unix model of file ownership and permissions. The permissions dictate who is allowed to do what with any given file or directory in Linux.</summary></entry><entry><title type="html">The Django Admin</title><link href="/jekyll/update/2021/06/23/django-admin.html" rel="alternate" type="text/html" title="The Django Admin" /><published>2021-06-23T07:10:19+03:00</published><updated>2021-06-23T07:10:19+03:00</updated><id>/jekyll/update/2021/06/23/django-admin</id><content type="html" xml:base="/jekyll/update/2021/06/23/django-admin.html">&lt;p&gt;In this tutorial, we are going to be checking out the admin functionality that comes with Django. Let’s start by creating an administrator user.&lt;/p&gt;

&lt;p&gt;We need to run migrations first in order to be able to create our admin user.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;&amp;quot;https://docs.djangoproject.com/en/3.1/topics/migrations/&amp;quot;&quot;&gt;Migrations&lt;/a&gt; are Django’s way of propagating changes that you make to your models e.g adding fields into your database schema.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see this output in your terminal;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Operations to perform:

Apply all migrations: admin, auth, contenttypes, sessions

Running migrations:

Applying contenttypes.0001_initial... OK

Applying auth.0001_initial... OK

Applying admin.0001_initial... OK

Applying admin.0002_logentry_remove_auto_add... OK

....
....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s now create our admin user;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should get this output in your terminal:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user:~/dir-to-project$ python manage.py createsuperuser

Username (leave blank to use 'user'):

Email address: example@gmail.com

Password: *********

Password (again): ********

Superuser created successfully.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s log into the admin page: &lt;a href=&quot;&amp;quot;http://127.0.0.1/admin&amp;quot;&quot;&gt;http://127.0.0.1/admin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Log in with the user we have just created and you should see a page an admin page.&lt;/p&gt;

&lt;p&gt;This is the place where you interact with your models via an actual interface; you can modify, add, delete entries for your registered models. You can notice that we have two models: Groups and Users.&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;Happy Coding!&lt;/mark&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">In this tutorial, we are going to be checking out the admin functionality that comes with Django. Let’s start by creating an administrator user.</summary></entry><entry><title type="html">Part 1: Introduction to Django</title><link href="/jekyll/update/2021/06/22/Introduction-to-Django.html" rel="alternate" type="text/html" title="Part 1: Introduction to Django" /><published>2021-06-22T13:15:20+03:00</published><updated>2021-06-22T13:15:20+03:00</updated><id>/jekyll/update/2021/06/22/Introduction-to-Django</id><content type="html" xml:base="/jekyll/update/2021/06/22/Introduction-to-Django.html">&lt;p&gt;&lt;a href=&quot;&amp;quot;https://www.djangoproject.com/&amp;quot;&quot;&gt;DJANGO&lt;/a&gt; is a high level python web framework that is built entirely in python. A web framework is a collection of packages or modules that helps a developer to write web applications or services with less code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;&amp;quot;https://www.djangoproject.com/&amp;quot;&quot;&gt;Django&lt;/a&gt; is free, open-source and relies on Model View Controller (MVC) pattern. Model is the component that contains the Business logic, View contains the User Interface (UI) logic while Controller is the main control component. Django is fast, secure and scalable, hence the phrase “A web framework for perfectionists with deadlines.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can check out &lt;a href=&quot;&amp;quot;https://www.djangoproject.com/&amp;quot;&quot;&gt;official Django documentation&lt;/a&gt; for more information.&lt;/p&gt;

&lt;header&gt;
	Prerequisites
&lt;/header&gt;
&lt;main&gt;
	&lt;ul&gt;
		&lt;li&gt;Python (preferably Python3)&lt;/li&gt;
		&lt;li&gt;A Virtual environment&lt;/li&gt;
		&lt;li&gt;Django&lt;/li&gt;
	&lt;/ul&gt;
&lt;/main&gt;

&lt;p&gt;Python comes pre-installed on Linux. If you are using windows, you need to download and install python from &lt;a href=&quot;&amp;quot;https://www.python.org/downloads/windows/&amp;quot;&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To check your python installation, open the Terminal and type; for python 2 and python3 respectively.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -V #To check python version from your terminal(python2)

python3 -V #To check python version from your terminal (python3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;a href=&quot;&amp;quot;https://docs.python.org/3/tutorial/venv.html&amp;quot;&quot;&gt;python virtual environment&lt;/a&gt; allows a developer to create isolated environments for his/her python projects. You are not limited to a certain number of virtual environments; You can have as many different virtual environments as you want.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can use &lt;a href=&quot;&amp;quot;https://pypi.org/project/pip/&amp;quot;&quot;&gt;pip&lt;/a&gt; to install a virtual environment. &lt;a href=&quot;&amp;quot;https://pypi.org/project/pip/&amp;quot;&quot;&gt;Pip&lt;/a&gt; is a package installer for python. In your terminal.&lt;/p&gt;

&lt;p&gt;Pip installation - &lt;code&gt;pip install pip&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To install virtual environments - &lt;code&gt;pip install virtualenv&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Let’s create a virtual environment. You can use any name for your virtual environment. In your Terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;virtualenv env&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Activate your virtual environment and navigate into it, then install Django inside your virtual environment&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install django&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Let’s create our first Django project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;django-admn startproject Mysite&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This will create a folder with the name of your project, in our case, Mysite in your current directory. Navigate to your project folder and fire your project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Visit http://127.0.0.1:8000/ to have a view of your first Django project.&lt;/p&gt;

&lt;p&gt;Congratulations! You just created your first Django web app.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">DJANGO is a high level python web framework that is built entirely in python. A web framework is a collection of packages or modules that helps a developer to write web applications or services with less code.</summary></entry><entry><title type="html">Part 2: Code editors &amp;amp; Version control system</title><link href="/jekyll/update/2021/06/22/editors-and-vcs.html" rel="alternate" type="text/html" title="Part 2: Code editors &amp;amp; Version control system" /><published>2021-06-22T13:15:20+03:00</published><updated>2021-06-22T13:15:20+03:00</updated><id>/jekyll/update/2021/06/22/editors-and-vcs</id><content type="html" xml:base="/jekyll/update/2021/06/22/editors-and-vcs.html">&lt;h3&gt;Configuring our development environment&lt;/h3&gt;

&lt;h4&gt;Install a code editor&lt;/h4&gt;

&lt;p&gt;A code editor produces rich texts (with fonts and formatting) unlike Word. They are specialized specifically for editing code.&lt;/p&gt;

&lt;p&gt;There are so many code editors out here you can use. Some people prefer IDEs (Integrated Development Environments) such as PyCharm, especially python developers.&lt;/p&gt;

&lt;p&gt;I have a few recommendations to help you get going.&lt;/p&gt;

&lt;h4&gt;Visual Studio Code&lt;/h4&gt;

&lt;p&gt;Vs-code is a nice code editor developed by Microsoft for windows, macOs and Linux. It is a powerful code editor with support for debugging, syntax highlighting, code snippets, embedded git control and many more. You can download it &lt;a href=&quot;&amp;quot;https://code.visualstudio.com/download&amp;quot;&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Sublime text 3&lt;/h4&gt;

&lt;p&gt;Available for all operating systems. It is a very popular code editor with a free evaluation period. You can download it &lt;a href=&quot;&amp;quot;https://www.sublimetext.com/3&amp;quot;&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Atom&lt;/h4&gt;

&lt;p&gt;It’s a free and open-source code editor. You can download it &lt;a href=&quot;&amp;quot;https://atom.io/&amp;quot;&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Install git - VCS&lt;/h4&gt;

&lt;p&gt;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. It is used by many programmers. On Ubuntu, you can install it using this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt install git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On windows, you can download git from &lt;a href=&quot;&amp;quot;https://git-scm.com/&amp;quot;&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After installation, create a free GitHub account &lt;a href=&quot;&amp;quot;https://github.com/&amp;quot;&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Set up your username, email address and code editor, for our case we are using visual studio code. Type these commands on your terminal;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config --global user.name &lt;username&gt;&lt;br /&gt;
&lt;code&gt;config --global user.email &lt;user-email&gt;&lt;br /&gt;
&lt;code&gt;config --global core.editor vscode&lt;/code&gt;&lt;/user-email&gt;&lt;/code&gt;&lt;/username&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we are ready to start coding!!&lt;/p&gt;

&lt;h4&gt;Create a git repository&lt;/h4&gt;

&lt;p&gt;In order put your project up on GitHub, you’ll need to create a repo for it to live in. You can follow the guide by &lt;a href=&quot;&amp;quot;https://docs.github.com/en/get-started/quickstart/create-a-repo&amp;quot;&quot;&gt;GitHub&lt;/a&gt; on how to create your first git repo and get going.&lt;/p&gt;

&lt;p&gt;Let’s call our repo Mysite. On your terminal, initialize a remote repository on your computer using this command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should get this out output:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Initialized empty Git repository in /{directory-name}/.git/ &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add your files to your remote repo using this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Commit your changes using this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m &quot;commit message&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s configure our remote repo;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add origin https://github.com/{your-name}/Mysite.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Confirm if your remote repo is well configured;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see the output below in your terminal;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;origin https://github.com/{your-name}/Mysite.git (fetch)
origin https://github.com/{your-name}/Mysite.git (push)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Awesome! It worked!&lt;/p&gt;

&lt;p&gt;Let’s push our code..&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push -u origin main or master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You will be prompted to enter your username and password.&lt;/p&gt;

&lt;p&gt;Congratulations, you just pushed your code on GitHub!!&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Configuring our development environment</summary></entry><entry><title type="html">Hello World!</title><link href="/jekyll/update/2021/06/21/hello.html" rel="alternate" type="text/html" title="Hello World!" /><published>2021-06-21T14:49:19+03:00</published><updated>2021-06-21T14:49:19+03:00</updated><id>/jekyll/update/2021/06/21/hello</id><content type="html" xml:base="/jekyll/update/2021/06/21/hello.html">&lt;p&gt;Working with strings in python.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot; data-lang=&quot;python3&quot;&gt;my_string = 'hi'
print(my_string)
print(my_string[0])
print(len(my_string))

print( my_string + &quot;&quot;, &quot;there&quot; )&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The ouput will be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot; data-lang=&quot;python3&quot;&gt;hi
h
2
hi there&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Working with strings in python.</summary></entry></feed>